#!/bin/sh

command="${1}"
on_update_failure="rollback"
on_update_failure_options="('rollback' 'ignore' 'retry')"

export save_dir=$(pwd)
export quiet=0
export github_releases="https://github.com/nuvlabox/deployment/releases"

set -o pipefail

usage()
{
  echo -e ""
  echo -e " -- NuvlaBox Engine installer -- "
  echo -e ""
  echo -e "Usage: $0 [COMMAND] [ARGS]"
  echo -e ""
  echo -e " -h --help\t\t\t\tShow this help information"
  echo -e ""
  echo -e "COMMANDS:"
  echo -e " install\t\t\t\tInstall the NuvlaBox Engine"
  echo -e " update\t\t\t\t\tUpdate an existing NuvlaBox Engine installation"
  echo -e " uninstall\t\t\t\tShutdown (and optionally delete) an existing NuvlaBox Engine installation"
  echo -e ""
  echo -e "INSTALL args:"
  echo -e " --compose-files=<list>\t\t\t(optional) Comma-separated list of compose files to deploy. If not passed, it uses all"
  echo -e " --environment=<list>\t\t\t(optional) Comma-separated list of ENV=VALUE keypairs"
  echo -e " --target-version=<string>\t\t(optional) NuvlaBox Engine release to be installed. If not passed, it uses the master branch"
  echo -e " --project=<string>\t\t\t(optional) Project name used during the first installation. Default is 'nuvlabox'"
  echo -e " --quiet\t\t\t\t(optional) Only print final status message"
  echo -e ""
  echo -e "UDPATE args:"
  echo -e " --compose-files=<list>\t\t\tComma-separated list of compose files to deploy"
  echo -e " --current-environment=<list>\t\t(optional) Comma-separated list of current ENV=VALUE keypairs, in case a rollback is needed"
  echo -e " --new-environment=<list>\t\t(optional) Comma-separated list of new ENV=VALUE keypairs"
  echo -e " --on-update-failure=<string>\t\tAction be take in case the update fails ${on_update_failure_options}. Default: ${on_update_failure}"
  echo -e " --project=<string>\t\t\tProject name used during the first installation"
  echo -e " --quiet\t\t\t\t(optional) Only print final status message"
  echo -e " --target-version=<string>\t\tNuvlaBox Engine version to be installed. Must match a release from ${github_releases}"
  echo -e " --working-dir=<string>\t\t\tDirectory, on the host, from where the NuvlaBox Engine was installed the first time, and where the corresponding config files can be found"
  echo -e ""
  echo -e "UNINSTALL args:"
  echo -e " --project=<string>\t\t\t(optional) Project name used during the first installation. Default is 'nuvlabox'"
  echo -e " --quiet\t\t\t\t(optional) Only print final status message"
}

banner_intro()
{
  nuvlabox-engine-printer "" ${1}
  nuvlabox-engine-printer " ______              _       ______                _______             _             " ${1}
  nuvlabox-engine-printer "|  ___ \            | |     (____  \              (_______)           (_)            " ${1}
  nuvlabox-engine-printer "| |   | |_   _ _   _| | ____ ____)  ) ___ _   _    _____   ____   ____ _ ____   ____ " ${1}
  nuvlabox-engine-printer "| |   | | | | | | | | |/ _  |  __  ( / _ ( \ / )  |  ___) |  _ \ / _  | |  _ \ / _  )" ${1}
  nuvlabox-engine-printer "| |   | | |_| |\ V /| ( ( | | |__)  ) |_| ) X (   | |_____| | | ( ( | | | | | ( (/ / " ${1}
  nuvlabox-engine-printer "|_|   |_|\____| \_/ |_|\_||_|______/ \___(_/ \_)  |_______)_| |_|\_|| |_|_| |_|\____)" ${1}
  nuvlabox-engine-printer "                                                                (_____|              " ${1}
  nuvlabox-engine-printer "" ${1}
}

check_args_install()
{
  if [[ -z $compose_files ]]
  then
    export compose_files=$(echo $(ls docker-compose.*) | tr ' ' ',')
    nuvlabox-engine-printer "Installing NuvlaBox Engine with all compose files: ${compose_files}" ${quiet} "INFO" "no"
  fi
}

check_args_update()
{
  if [[ -z $compose_files ]] || [[ -z $target_version ]] || [[ -z $quiet ]] || [[ -z $on_update_failure ]] || \
      [[ -z $project ]] || [[ -z $working_dir ]]
  then
    echo -e "update ERROR: missing mandatory args"
    usage
    exit 1
  fi

  if [[ -z $old_environment ]]
  then
    export old_environment=$(nuvlabox-engine-current-env ${project} 2>&1)
    if [[ $? -ne 0 ]]
    then
      echo -e "update ERROR: cannot infer --current-environment. Unable to continue"
      exit 1
    fi
  fi

  if [[ -z $environment ]]
  then
    # assume no changes to the new env
    export environment="${old_environment}"
  fi
}

case ${command} in
  -h | --help)
    usage
    exit
    ;;
  update)
    #------------------------------------------------------------------------#
    # UPDATE
    #------------------------------------------------------------------------#
    shift
    while [ "$1" != "" ]; do
      PARAM=`echo -e $1 | awk -F= '{print $1}'`
      VALUE=`echo -e $1 | cut -d "=" -f 2-`
      case $PARAM in
        -h | --help)
          usage
          exit
          ;;
        --compose-files)
          export compose_files=${VALUE}
          ;;
        --target-version)
          export target_version=${VALUE}
          ;;
        --quiet)
          export quiet=1
          ;;
        --on-update-failure)
          case $VALUE in
            retry|ignore|rollback)
              export on_update_failure=${VALUE}
              ;;
            *)
              echo -e "${command} ERROR: unsupported value for ${PARAM}. Must be one of ${on_update_failure_options}. Got: ${VALUE}"
              exit 1
              ;;
          esac
          ;;
        --new-environment)
          export environment=${VALUE}
          ;;
        --current-environment)
          export old_environment=${VALUE}
          ;;
        --project)
          export project=${VALUE}
          ;;
        --working-dir)
          export working_dir=${VALUE}
          ;;
        *)
          echo -e "${command} ERROR: unknown option $PARAM"
          usage
          exit 1
          ;;
      esac
      shift
    done
    check_args_update
    banner_intro ${quiet}
    output=$(nuvlabox-engine-update 2>&1 | tee /dev/fd/2)

    if [[ $? -ne 0 ]]
    then
      # update failed, so check the fail policy
      case $on_update_failure in
        rollback)
          nuvlabox-engine-printer "NuvlaBox Engine update failed. Rollback too previous version" 0 "WARNING" "no"
          nuvlabox-engine-printer "ROLLBACK" ${quiet} "NONE" "yes"
          output=$(nuvlabox-engine-rollback 2>&1 | tee /dev/fd/2)
          if [[ $? -ne 0 ]]
          then
            exit 1
          else
            # rollback successful
            nuvlabox-engine-printer "NuvlaBox Engine update failed. But was able to rollback to previous version" ${quiet} "WARNING" "no"
            exit 0
          fi
          ;;
        retry)
          nuvlabox-engine-printer "NuvlaBox Engine update failed once. Trying a second time..." ${quiet} "WARNING" "no"
          nuvlabox-engine-printer "RETRY" ${quiet} "NONE" "yes"
          output=$(nuvlabox-engine-update 2>&1 | tee /dev/fd/2)
          if [[ $? -ne 0 ]]
          then
            exit 1
          else
            # succeeded the second time
            nuvlabox-engine-printer "NuvlaBox Engine update finally succeeded on retry!" ${quiet} "INFO" "no"
            exit 0
          fi
          ;;
        ignore)
          # nothing to do. Just printout final message and exit with error
          exit 1
          ;;
      esac
    else
      # update successful
      # print final message and finish
      exit 0
    fi
    ;;
  uninstall)
    #------------------------------------------------------------------------#
    # UNINSTALL
    #------------------------------------------------------------------------#
    shift
    while [ "$1" != "" ]; do
      PARAM=`echo -e $1 | awk -F= '{print $1}'`
      VALUE=`echo -e $1 | cut -d "=" -f 2-`
      case $PARAM in
        -h | --help)
          usage
          exit
          ;;
        --project)
          export project=${VALUE}
          ;;
        *)
          echo -e "${command} ERROR: unknown option $PARAM"
          usage
          exit 1
          ;;
      esac
      shift
    done
    banner_intro ${quiet}
    output=$(nuvlabox-engine-uninstall 2>&1 | tee /dev/fd/2)

    if [[ $? -ne 0 ]]
    then
      # uninstall failed
      nuvlabox-engine-printer "NuvlaBox Engine uninstall failed" ${quiet} "ERROR" "no"
      exit 1
    else
      # uninstall successful
      # print final message and finish
      exit 0
    fi
    ;;
  install)
    #------------------------------------------------------------------------#
    # INSTALL
    #------------------------------------------------------------------------#
    shift
    while [ "$1" != "" ]; do
      PARAM=`echo -e $1 | awk -F= '{print $1}'`
      VALUE=`echo -e $1 | cut -d "=" -f 2-`
      case $PARAM in
        -h | --help)
          usage
          exit
          ;;
        --compose-files)
          export compose_files=${VALUE}
          ;;
        --environment)
          export environment=${VALUE}
          ;;
        --quiet)
          export quiet=1
          ;;
        --project)
          export project=${VALUE}
          ;;
        --target-version)
          export target_version=${VALUE}
          ;;
        *)
          echo -e "${command} ERROR: unknown option $PARAM"
          usage
          exit 1
          ;;
      esac
      shift
    done
    banner_intro ${quiet}
    check_args_install
    output=$(nuvlabox-engine-install 2>&1 | tee /dev/fd/2)

    if [[ $? -ne 0 ]]
    then
      # install failed
      nuvlabox-engine-printer "NuvlaBox Engine install failed" ${quiet} "ERROR" "no"
      exit 1
    else
      # install successful
      # print final message and finish
      exit 0
    fi
    ;;
  *)
    echo -e "ERROR: unknown command ${command}"
    usage
    exit 1
    ;;
esac
